diff --git a/drivers/CMakeLists.txt b/drivers/CMakeLists.txt
index 5c005228..bc25862d 100644
--- a/drivers/CMakeLists.txt
+++ b/drivers/CMakeLists.txt
@@ -30,6 +30,7 @@ add_subdirectory(hub75)
 add_subdirectory(uc8151)
 add_subdirectory(uc8159)
 add_subdirectory(uc8151_legacy)
+add_subdirectory(../../../drivers/ssd1681)
 add_subdirectory(pwm)
 add_subdirectory(servo)
 add_subdirectory(encoder)
@@ -38,4 +39,4 @@ add_subdirectory(vl53l5cx)
 add_subdirectory(pcf85063a)
 add_subdirectory(pms5003)
 add_subdirectory(sh1107)
-add_subdirectory(st7567)
\ No newline at end of file
+add_subdirectory(st7567)
diff --git a/libraries/badger2040/badger2040.cmake b/libraries/badger2040/badger2040.cmake
index 6d8df34b..07f6fb66 100644
--- a/libraries/badger2040/badger2040.cmake
+++ b/libraries/badger2040/badger2040.cmake
@@ -8,4 +8,4 @@ target_sources(${LIB_NAME} INTERFACE
 target_include_directories(${LIB_NAME} INTERFACE ${CMAKE_CURRENT_LIST_DIR})
 
 # Pull in pico libraries that we need
-target_link_libraries(${LIB_NAME} INTERFACE bitmap_fonts hershey_fonts pico_stdlib hardware_pwm uc8151_legacy)
+target_link_libraries(${LIB_NAME} INTERFACE bitmap_fonts hershey_fonts pico_stdlib hardware_pwm ssd1681)
diff --git a/libraries/badger2040/badger2040.cpp b/libraries/badger2040/badger2040.cpp
index 6be32b91..41b8d2a1 100644
--- a/libraries/badger2040/badger2040.cpp
+++ b/libraries/badger2040/badger2040.cpp
@@ -64,7 +64,7 @@ namespace pimoroni {
     gpio_set_function(LED, GPIO_FUNC_PWM);
     led(0);
 
-    uc8151_legacy.init();
+    ssd1681.init();
 
     // TODO: set default image?
   }
@@ -124,9 +124,9 @@ namespace pimoroni {
 
 
   void Badger2040::clear() {
-    const uint32_t column_len = 128 / 8;
-    const uint32_t buf_len = column_len * 296;
-    uint8_t* buf = uc8151_legacy.get_frame_buffer();
+    const uint32_t column_len = 200 / 8;
+    const uint32_t buf_len = column_len * 200;
+    uint8_t* buf = ssd1681.get_frame_buffer();
     
     if (_pen == 0) {
       memset(buf, 0xff, buf_len);
@@ -135,7 +135,7 @@ namespace pimoroni {
       memset(buf, 0, buf_len);
     }
     else {
-      for(uint32_t x = 0; x < 296; x++) {
+      for(uint32_t x = 0; x < 200; x++) {
         uint8_t val = _dither_column_value(x, _pen);
         memset(buf, val, column_len);
         buf += column_len;
@@ -145,12 +145,12 @@ namespace pimoroni {
 
   void Badger2040::pixel(int32_t x, int32_t y) {
     if(_thickness == 1) {
-      uc8151_legacy.pixel(x, y, _dither_value(x, y, _pen));
+      ssd1681.pixel(x, y, _dither_value(x, y, _pen));
     }else{
       uint8_t ht = _thickness / 2;
       for(int sy = 0; sy < _thickness; sy++) {
         for(int sx = 0; sx < _thickness; sx++) {
-          uc8151_legacy.pixel(x + sx - ht, y + sy - ht, _dither_value(x + sx - ht, y + sy - ht, _pen));
+          ssd1681.pixel(x + sx - ht, y + sy - ht, _dither_value(x + sx - ht, y + sy - ht, _pen));
         }
       }
     }
@@ -161,20 +161,20 @@ namespace pimoroni {
     image(data, sheet_width, icon_size * index, 0, icon_size, icon_size, dx, dy);
   }
 
-  // Display an image that fills the screen (296*128)
+  // Display an image that fills the screen (200*200)
   void Badger2040::image(const uint8_t* data) {
-    uint8_t* ptr = uc8151_legacy.get_frame_buffer();
-    
-    for (uint32_t x = 0; x < 296; ++x) {
+    uint8_t* ptr = ssd1681.get_frame_buffer();
+
+    for (uint32_t x = 0; x < 200; ++x) {
       // extract bitmask for this pixel
       uint32_t bm = 0b10000000 >> (x & 0b111);
-      
-      for (uint32_t y = 0; y < 128; y += 8) {
+
+      for (uint32_t y = 0; y < 200; y += 8) {
         uint8_t val = 0;
         for (uint32_t cy = 0; cy < 8; ++cy) {
           // work out byte offset in source data
-          uint32_t o = ((y + cy) * (296 >> 3)) + (x >> 3);
-          
+          uint32_t o = ((y + cy) * (200 >> 3)) + (x >> 3);
+
           // Set bit in val if set in source data
           if (data[o] & bm) {
             val |= 0b10000000 >> cy;
@@ -187,7 +187,7 @@ namespace pimoroni {
 
   // Display an image smaller than the screen (sw*sh) at dx, dy
   void Badger2040::image(const uint8_t *data, int w, int h, int x, int y) {
-    if (x == 0 && y == 0 && w == 296 && h == 128) {
+    if (x == 0 && y == 0 && w == 200 && h == 200) {
       image(data);
     }
     else {
@@ -205,7 +205,7 @@ namespace pimoroni {
         uint32_t bm = 0b10000000 >> ((x + sx) & 0b111);
 
         // draw the pixel
-        uc8151_legacy.pixel(dx + x, dy + y, data[o] & bm);
+        ssd1681.pixel(dx + x, dy + y, data[o] & bm);
       }
     }
   }
@@ -225,19 +225,19 @@ namespace pimoroni {
     }
     w += _thickness - 1;
     h += _thickness - 1;
-    if (x + w > 296) {
-      w = 296 - x;
+    if (x + w > 200) {
+      w = 200 - x;
     }
-    if (y + h > 128) {
-      h = 128 - y;
+    if (y + h > 200) {
+      h = 200 - y;
     }
 
     if (h >= 8) {
       // Directly write to the frame buffer when clearing a large area
-      uint8_t* buf = uc8151_legacy.get_frame_buffer();
+      uint8_t* buf = ssd1681.get_frame_buffer();
       
       for(int cx = x; cx < x + w; cx++) {
-        uint8_t* buf_ptr = &buf[cx * 16 + y / 8];
+        uint8_t* buf_ptr = &buf[cx * 25 + y / 8];
         uint8_t first_mask = 0xff >> (y & 7);
         uint8_t last_mask = 0xff >> ((y + h) & 7);
         uint32_t val = _dither_column_value(cx, _pen);
@@ -253,7 +253,7 @@ namespace pimoroni {
     else {
       for(int cx = x; cx < x + w; cx++) {
         for(int cy = y; cy < y + h; cy++) {
-          uc8151_legacy.pixel(cx, cy, _dither_value(cx, cy, _pen));
+          ssd1681.pixel(cx, cy, _dither_value(cx, cy, _pen));
         }
       }
     }
@@ -283,11 +283,11 @@ namespace pimoroni {
   }
 
   void Badger2040::debug_command(uint8_t reg, size_t len, const uint8_t *data) {
-    uc8151_legacy.command(reg, len, data);
+    ssd1681.command(reg, len, data);
   }
 
   void Badger2040::dump_otp(uint8_t *data) {
-    uc8151_legacy.read(0xa2,  0xFFF, data);
+    ssd1681.read(0xa2,  0xFFF, data);
   }
 
   void Badger2040::update_button_states() {
@@ -301,31 +301,31 @@ namespace pimoroni {
   }
 
   bool Badger2040::is_busy() {
-    return uc8151_legacy.is_busy();
+    return ssd1681.is_busy();
   }
 
   void Badger2040::power_off() {
-    uc8151_legacy.power_off();
+    ssd1681.power_off();
   }
 
   void Badger2040::invert(bool invert) {
-    uc8151_legacy.invert(invert);
+    ssd1681.invert(invert);
   }
 
   void Badger2040::update_speed(uint8_t speed) {
-    uc8151_legacy.update_speed(speed);
+    ssd1681.update_speed(speed);
   }
 
   uint32_t Badger2040::update_time() {
-    return uc8151_legacy.update_time();
+    return ssd1681.update_time();
   }
 
   void Badger2040::partial_update(int x, int y, int w, int h, bool blocking) {
-    uc8151_legacy.partial_update(x, y, w, h, blocking);
+    ssd1681.partial_update(x, y, w, h, blocking);
   }
 
   void Badger2040::update(bool blocking) {
-    uc8151_legacy.update(blocking);
+    ssd1681.update(blocking);
   }
 
   const hershey::font_glyph_t* Badger2040::glyph_data(unsigned char c) {
@@ -357,7 +357,7 @@ namespace pimoroni {
             pixel(x + px, y + py);
           }
         }
-      }, message, x, y, 296 - x, std::max(1.0f, s), letter_spacing);
+      }, message, x, y, 200 - x, std::max(1.0f, s), letter_spacing);
     } else {
       hershey::text(_font, [this](int32_t x1, int32_t y1, int32_t x2, int32_t y2) {
         line(x1, y1, x2, y2);
diff --git a/libraries/badger2040/badger2040.hpp b/libraries/badger2040/badger2040.hpp
index 0d5b1731..b6bb21fc 100644
--- a/libraries/badger2040/badger2040.hpp
+++ b/libraries/badger2040/badger2040.hpp
@@ -2,7 +2,7 @@
 
 #include <string>
 
-#include "drivers/uc8151_legacy/uc8151_legacy.hpp"
+#include "../../../../drivers/ssd1681/ssd1681.hpp"
 
 #include "libraries/hershey_fonts/hershey_fonts.hpp"
 #include "libraries/bitmap_fonts/bitmap_fonts.hpp"
@@ -14,7 +14,7 @@ namespace pimoroni {
 
   class Badger2040 {
   protected:
-    UC8151_Legacy uc8151_legacy;
+    SSD1681 ssd1681;
     const hershey::font_t *_font = &hershey::futural;
     const bitmap::font_t *_bitmap_font = nullptr;
     uint8_t _pen = 0;
@@ -25,11 +25,11 @@ namespace pimoroni {
 
   public:
     Badger2040()
-      : uc8151_legacy(296, 128, spi0, CS, DC, CLK, MOSI, BUSY, RESET) {
+      : ssd1681(200, 200, spi0, CS, DC, CLK, MOSI, BUSY, RESET) {
     };
     // Constructor for Python-managed buffer
     Badger2040(uint8_t *framebuffer)
-      : uc8151_legacy(296, 128, framebuffer, spi0, CS, DC, CLK, MOSI, BUSY, RESET) {
+      : ssd1681(200, 200, framebuffer, spi0, CS, DC, CLK, MOSI, BUSY, RESET) {
     };
     void init();
     void update(bool blocking=false);
diff --git a/micropython/examples/badger2040/micropython-builtins.cmake b/micropython/examples/badger2040/micropython-builtins.cmake
index 68c04aee..ddf65755 100644
--- a/micropython/examples/badger2040/micropython-builtins.cmake
+++ b/micropython/examples/badger2040/micropython-builtins.cmake
@@ -41,7 +41,7 @@ convert_image(usermod_badger2040 launchericons)
 
 convert_raw(usermod_badger2040 289-0-wind-in-the-willows-abridged.txt witw)
 
-copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/assets/boot.py boot)
+copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/../../../../../module_py/boot.py boot)
 copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/launcher.py _launcher)
 copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/clock.py _clock)
 copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/fonts.py _fonts)
@@ -53,3 +53,8 @@ copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/help.py _help)
 copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/info.py _info)
 copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/qrgen.py _qrgen)
 copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/badger_os.py badger_os)
+copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/../../../../../module_py/ostentus.py ostentus)
+copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/../../../../../module_py/ostentus_leds.py ostentus_leds)
+copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/../../../../../module_py/ostentus_slideshow.py ostentus_slideshow)
+copy_module(usermod_badger2040 ${CMAKE_CURRENT_LIST_DIR}/../../../../../module_py/splashscreen_rd.py splashscreen_rd)
+
diff --git a/micropython/modules/badger2040-micropython.cmake b/micropython/modules/badger2040-micropython.cmake
index 160ea378..e8c24735 100644
--- a/micropython/modules/badger2040-micropython.cmake
+++ b/micropython/modules/badger2040-micropython.cmake
@@ -6,6 +6,8 @@ list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/../../")
 include(pimoroni_i2c/micropython)
 include(pimoroni_bus/micropython)
 
+include(../../../../module/ostentus_i2c/micropython)
+
 include(breakout_dotmatrix/micropython)
 include(breakout_encoder/micropython)
 include(breakout_ioexpander/micropython)
diff --git a/micropython/modules/badger2040/badger2040.c b/micropython/modules/badger2040/badger2040.c
index 4aa0dfed..e6a9c439 100644
--- a/micropython/modules/badger2040/badger2040.c
+++ b/micropython/modules/badger2040/badger2040.c
@@ -104,8 +104,8 @@ STATIC const mp_rom_map_elem_t badger2040_globals_table[] = {
     { MP_ROM_QSTR(MP_QSTR_SYSTEM_FAST), MP_ROM_INT(3) },
     { MP_ROM_QSTR(MP_QSTR_SYSTEM_TURBO), MP_ROM_INT(4) },
 
-    { MP_ROM_QSTR(MP_QSTR_WIDTH), MP_ROM_INT(296) },
-    { MP_ROM_QSTR(MP_QSTR_HEIGHT), MP_ROM_INT(128) },
+    { MP_ROM_QSTR(MP_QSTR_WIDTH), MP_ROM_INT(200) },
+    { MP_ROM_QSTR(MP_QSTR_HEIGHT), MP_ROM_INT(200) },
 
     { MP_ROM_QSTR(MP_QSTR_BUTTON_A), MP_ROM_INT(12) },
     { MP_ROM_QSTR(MP_QSTR_BUTTON_B), MP_ROM_INT(13) },
diff --git a/micropython/modules/badger2040/badger2040.cpp b/micropython/modules/badger2040/badger2040.cpp
index b6577e45..9f984e24 100644
--- a/micropython/modules/badger2040/badger2040.cpp
+++ b/micropython/modules/badger2040/badger2040.cpp
@@ -82,8 +82,8 @@ mp_obj_t Badger2040_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_
     mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
     mp_arg_parse_all_kw_array(n_args, n_kw, all_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
 
-    int width = 296;
-    int height = 128;
+    int width = 200;
+    int height = 200;
 
     uint8_t *buffer = nullptr;
 
@@ -337,8 +337,8 @@ mp_obj_t Badger2040_image(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_
         { MP_QSTR_, MP_ARG_REQUIRED | MP_ARG_OBJ },
         { MP_QSTR_data, MP_ARG_REQUIRED | MP_ARG_OBJ },
 
-        { MP_QSTR_w, MP_ARG_INT, {.u_int = 296} },
-        { MP_QSTR_h, MP_ARG_INT, {.u_int = 128} },
+        { MP_QSTR_w, MP_ARG_INT, {.u_int = 200} },
+        { MP_QSTR_h, MP_ARG_INT, {.u_int = 200} },
         { MP_QSTR_x, MP_ARG_INT, {.u_int = 0} },
         { MP_QSTR_y, MP_ARG_INT, {.u_int = 0} }
     };
diff --git a/micropython/modules/badger2040/micropython.cmake b/micropython/modules/badger2040/micropython.cmake
index ded85199..339e61ea 100644
--- a/micropython/modules/badger2040/micropython.cmake
+++ b/micropython/modules/badger2040/micropython.cmake
@@ -6,13 +6,13 @@ target_sources(usermod_${MOD_NAME} INTERFACE
     ${CMAKE_CURRENT_LIST_DIR}/${MOD_NAME}.c
     ${CMAKE_CURRENT_LIST_DIR}/${MOD_NAME}.cpp
     ${CMAKE_CURRENT_LIST_DIR}/../../../libraries/badger2040/badger2040.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/../../../drivers/uc8151_legacy/uc8151_legacy.cpp
+    ${CMAKE_CURRENT_LIST_DIR}/../../../../../drivers/ssd1681/ssd1681.cpp
 )
 
 target_include_directories(usermod_${MOD_NAME} INTERFACE
     ${CMAKE_CURRENT_LIST_DIR}
     ${CMAKE_CURRENT_LIST_DIR}/../../../libraries/badger2040/
-    ${CMAKE_CURRENT_LIST_DIR}/../../../drivers/uc8151_legacy/
+    ${CMAKE_CURRENT_LIST_DIR}/../../../../../drivers/ssd1681/
 )
 
 target_compile_definitions(usermod_${MOD_NAME} INTERFACE
